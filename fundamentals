# Put any initialization logic here.  The context object will be passed to
# the other methods in your algorithm.
def initialize(context):
    context.limit = 10
    
    schedule_function(rebalance,
                      date_rule = date_rules.every_day(),
                      time_rule = time_rules.market_open())
    
def rebalance(context, data):
    for stock in context.portfolio.positions:
        if stock not in context.fundamentals and stock in data:
            order_target_percent(stock,0)
    
def before_trading_start(context):
    context.fundamentals = get_fundamentals(
        query(
            fundamentals.valuation_ratios.pb_ratio,
            fundamentals.valuation_ratios.pe_ratio,
        )
        .filter(
            fundamentals.valuation_ratios.pe_ratio < 14
            
        )
        .filter(
            fundamentals.valuation_ratios.pb_ratio < 2
            
        )
        .order_by(
            fundamentals.valuation.market_cap.desc()
        )
        .limit(context.limit)
    )
    
    update_universe(context.fundamentals.columns.values)
# Will be called on every trade event for the securities you specify. 
def handle_data(context, data):
    cash = context.portfolio.cash
    current_positions = context.portfolio.positions
    
    for stock in data:
        current_position = context.portfolio.positions[stock].amount
        stock_price = data[stock].price
        plausible_investment = cash/10.0
        stop_price = stock_price - (stock_price * 0.01)
        
        share_amount = int(plausible_investment/stock_price)
        
        try: 
            if stock_price < plausible_investment:
                if current_position ==0:
                    if context.fundamentals[stock]['pe_ratio'] < 11:
                        order(stock, share_amount, style=StopOrder(stop_price))
        
        except Exception as e:
            print(str(e))
